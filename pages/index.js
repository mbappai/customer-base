import Head from 'next/head'
import {useState,useEffect} from 'react'
import styles from '../styles/Home.module.css'
import {Button, List,Card} from 'antd'
import CustomerModal from '../components/customerModal/component'
import { v4 as uuidv4 } from 'uuid';
import {PrismaClient} from '@prisma/client'
import CustomerProfile from '../components/customerProfile/customerProfile'

const prisma = new PrismaClient();

export default function Home({customerData}) {

  const [isModalOpen,setIsModalOpen] = useState(false);
  const [customers, setCustomers] =  useState([]);
  const [isProfileVisible, setIsProfileVisible] = useState(false);
  const [selectedCustomer, setSelectedCustomer] = useState({})

  function toggleModal(){
    setIsModalOpen(!isModalOpen);
  }

  function handleCreateCustomer(formData){

    console.log(formData)
    const payload = {
      customerName: formData.customerName,
      phoneNumber: formData.phone,
      bottomMeasurements: formData.bottomMeasurements || [],
      topMeasurements: formData.topMeasurements || []
    } 
    // save to database
    // TODO: convert fetch to an await instead
    fetch('/api/customer',{
      method:'POST', 
      body: JSON.stringify(payload)
    })
    .then(res=>res.json())
    .then(data=>{

    const localStateData = data.message
    console.log('data',data)

    const clonedCustomers = [...customers];
    clonedCustomers.push(localStateData);
    // update the state
    setCustomers(clonedCustomers)
      // console.log(data)
    })
    .catch(err=>console.log(err))

    // close modal
    toggleModal();
  }

  const handleDeleteCustomer = async(targetID)=>{

    const payload = {id:targetID}
    console.log(payload)

     fetch('/api/customer',{
      method:'DELETE',
      body: JSON.stringify(payload) 
    })
    .then(res=>res.json())
    .then(data=>console.log(data))
    .catch(err=>console.log(err))


    const clonedCustomerList = customers.slice();
    // delet target user
    const updatedCustomerList = clonedCustomerList.filter(customer=>customer.id !== targetID)
    // update the state with updated list
    setCustomers(updatedCustomerList)

  }

  const handleViewProfile = (customerId) =>{
    const customerData = customers.find(customer=>customer.id == customerId);
    console.log(customerData)
    setSelectedCustomer(customerData)
    setIsProfileVisible(true)
  }

  const handleToggleProfile = () =>{
    setIsProfileVisible(!isProfileVisible)
  }

  const updateBottomMeasurement = (measurement) =>{
    const clonedCustomerData = customers.slice()
    const targetCustomer = clonedCustomerData.find(customer=>customer.id == measurement.customerId);
    
    const targetMeasurementIndex = targetCustomer.bottomMeasurements.findIndex(btmMeasurement=>btmMeasurement.id == measurement.id )
    targetCustomer.bottomMeasurements[targetMeasurementIndex] = measurement;
    console.log(clonedCustomerData);
    // update local state
    setCustomers(clonedCustomerData);
    // update database with new change
  }

  const updateTopMeasurement = (measurement) =>{
    const clonedCustomerData = customers.slice()
    const targetCustomer = clonedCustomerData.find(customer=>customer.id == measurement.customerId);
    
    const targetMeasurementIndex = targetCustomer.topMeasurements.findIndex(topMeasurement=>topMeasurement.id == measurement.id )
    targetCustomer.topMeasurements[targetMeasurementIndex] = measurement;
    console.log(clonedCustomerData);
    // update local state
    setCustomers(clonedCustomerData);
    // update database with new change
  }

  useEffect(() => {
    // set customer data to local state
    // setCustomers({
    //   ...customers,
    //   ...customerData
    // })
    setCustomers(customerData)
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Tailormaate</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
       <Button style={{marginBottom:'1em'}} onClick={toggleModal}>Create customer</Button>
        <CustomerModal isModalOpen={isModalOpen} onToggleModal={toggleModal} handleCreateCustomer={handleCreateCustomer}/>
        <Card style={{width:'700px',border:'1px solid #e5e5e5', padding:'1em'}}>
        <CustomersList onViewProfile={handleViewProfile} onDeleteCustomer={handleDeleteCustomer} customerData={customers}/>
        </Card>
      </main>

      <CustomerProfile 
      updateBottomMeasurement={updateBottomMeasurement}
      updateTopMeasurement={updateTopMeasurement}
      customerData={selectedCustomer}  
      onToggleProfile={handleToggleProfile} 
      isProfileVisible={isProfileVisible}
      />
    </div>
  )
}

function CustomersList({customerData, onDeleteCustomer, onViewProfile}){
  return(
    <List
    itemLayout="horizontal"
    dataSource={customerData} 
    renderItem={item => (
      <List.Item
        actions={[<Button type='danger' onClick={()=>onDeleteCustomer(item.id)} key='delete-button'>Delete</Button>  ]}
      >
        <List.Item.Meta
          title={<div onClick={()=>onViewProfile(item.id)}>{`${item.name} — ${item.phoneNumber}`}</div>}
          description={`Top measurements:${item.topMeasurements?.length} — Bottom measurements:${item.bottomMeasurements?.length}`}
        />
      </List.Item>
    )}
  />
  )
}

export async function getServerSideProps(){

  const getAllCustomerData = await prisma.customer.findMany({
    include:{
      topMeasurements:true,
      bottomMeasurements:true
    }
  });

  return {
    props:{
      customerData: JSON.parse(JSON.stringify(getAllCustomerData))
    }
  }
}